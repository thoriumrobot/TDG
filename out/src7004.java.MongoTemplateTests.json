{"directed": true, "multigraph": false, "graph": {}, "nodes": [{"attr": {"type": "class", "name": "MongoTemplateTests", "nullable": false}, "id": "src7004.java.MongoTemplateTests"}, {"attr": {"type": "method", "name": "cleanUp", "nullable": false}, "id": "src7004.java.MongoTemplateTests.cleanUp()"}, {"attr": {"type": "method", "name": "insertsSimpleEntityCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.insertsSimpleEntityCorrectly()"}, {"attr": {"type": "method", "name": "bogusUpdateDoesNotTriggerException", "nullable": false}, "id": "src7004.java.MongoTemplateTests.bogusUpdateDoesNotTriggerException()"}, {"attr": {"type": "method", "name": "throwsExceptionForDuplicateIds", "nullable": false}, "id": "src7004.java.MongoTemplateTests.throwsExceptionForDuplicateIds()"}, {"attr": {"type": "method", "name": "throwsExceptionForUpdateWithInvalidPushOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.throwsExceptionForUpdateWithInvalidPushOperator()"}, {"attr": {"type": "method", "name": "throwsExceptionForIndexViolationIfConfigured", "nullable": false}, "id": "src7004.java.MongoTemplateTests.throwsExceptionForIndexViolationIfConfigured()"}, {"attr": {"type": "method", "name": "rejectsDuplicateIdInInsertAll", "nullable": false}, "id": "src7004.java.MongoTemplateTests.rejectsDuplicateIdInInsertAll()"}, {"attr": {"type": "method", "name": "createCappedCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.createCappedCollection()"}, {"attr": {"type": "method", "name": "getCollectionInfo", "nullable": false}, "id": "src7004.java.MongoTemplateTests.getCollectionInfo()"}, {"attr": {"type": "parameter", "name": "collectionName", "nullable": false}, "id": "src7004.java.MongoTemplateTests.getCollectionInfo().collectionName"}, {"attr": {"type": "method", "name": "testEnsureIndex", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testEnsureIndex()"}, {"attr": {"type": "method", "name": "testReadIndexInfoForIndicesCreatedViaMongoShellCommands", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testReadIndexInfoForIndicesCreatedViaMongoShellCommands()"}, {"attr": {"type": "method", "name": "testProperHandlingOfDifferentIdTypesWithMappingMongoConverter", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypesWithMappingMongoConverter()"}, {"attr": {"type": "method", "name": "testProperHandlingOfDifferentIdTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypes()"}, {"attr": {"type": "parameter", "name": "mongoTemplate", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypes().mongoTemplate"}, {"attr": {"type": "method", "name": "checkCollectionContents", "nullable": false}, "id": "src7004.java.MongoTemplateTests.checkCollectionContents()"}, {"attr": {"type": "parameter", "name": "entityClass", "nullable": false}, "id": "src7004.java.MongoTemplateTests.checkCollectionContents().entityClass"}, {"attr": {"type": "parameter", "name": "count", "nullable": false}, "id": "src7004.java.MongoTemplateTests.checkCollectionContents().count"}, {"attr": {"type": "method", "name": "testFindAndUpdate", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testFindAndUpdate()"}, {"attr": {"type": "method", "name": "testFindAndUpdateUpsert", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testFindAndUpdateUpsert()"}, {"attr": {"type": "method", "name": "testFindAndRemove", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testFindAndRemove()"}, {"attr": {"type": "method", "name": "testDistinct", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testDistinct()"}, {"attr": {"type": "method", "name": "testDistinctCovertsResultToPropertyTargetTypeCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testDistinctCovertsResultToPropertyTargetTypeCorrectly()"}, {"attr": {"type": "method", "name": "testDistinctResolvesDbRefsCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testDistinctResolvesDbRefsCorrectly()"}, {"attr": {"type": "method", "name": "testUsingAnInQueryWithObjectId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithObjectId()"}, {"attr": {"type": "method", "name": "testUsingAnInQueryWithStringId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithStringId()"}, {"attr": {"type": "method", "name": "testUsingAnInQueryWithLongId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithLongId()"}, {"attr": {"type": "method", "name": "testUsingAnInQueryWithBigIntegerId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithBigIntegerId()"}, {"attr": {"type": "method", "name": "testUsingAnInQueryWithPrimitiveIntId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithPrimitiveIntId()"}, {"attr": {"type": "method", "name": "testUsingInQueryWithList", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingInQueryWithList()"}, {"attr": {"type": "method", "name": "testUsingRegexQueryWithOptions", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingRegexQueryWithOptions()"}, {"attr": {"type": "method", "name": "testUsingAnOrQuery", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingAnOrQuery()"}, {"attr": {"type": "method", "name": "testUsingUpdateWithMultipleSet", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingUpdateWithMultipleSet()"}, {"attr": {"type": "method", "name": "testRemovingDocument", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testRemovingDocument()"}, {"attr": {"type": "method", "name": "testAddingToList", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testAddingToList()"}, {"attr": {"type": "method", "name": "testFindOneWithSort", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testFindOneWithSort()"}, {"attr": {"type": "method", "name": "testUsingReadPreference", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUsingReadPreference()"}, {"attr": {"type": "method", "name": "removingNullIsANoOp", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removingNullIsANoOp()"}, {"attr": {"type": "method", "name": "updatesObjectIdsCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesObjectIdsCorrectly()"}, {"attr": {"type": "method", "name": "testWriteConcernResolver", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testWriteConcernResolver()"}, {"attr": {"type": "method", "name": "updatesDBRefsCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesDBRefsCorrectly()"}, {"attr": {"type": "method", "name": "executeDocument", "nullable": false}, "id": "src7004.java.MongoTemplateTests.executeDocument()"}, {"attr": {"type": "method", "name": "executeDocumentWithCursorPreparer", "nullable": false}, "id": "src7004.java.MongoTemplateTests.executeDocumentWithCursorPreparer()"}, {"attr": {"type": "method", "name": "countsDocumentsCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.countsDocumentsCorrectly()"}, {"attr": {"type": "method", "name": "countRejectsNullEntityClass", "nullable": false}, "id": "src7004.java.MongoTemplateTests.countRejectsNullEntityClass()"}, {"attr": {"type": "method", "name": "countRejectsEmptyCollectionName", "nullable": false}, "id": "src7004.java.MongoTemplateTests.countRejectsEmptyCollectionName()"}, {"attr": {"type": "method", "name": "countRejectsNullCollectionName", "nullable": false}, "id": "src7004.java.MongoTemplateTests.countRejectsNullCollectionName()"}, {"attr": {"type": "method", "name": "returnsEntityWhenQueryingForDateTime", "nullable": false}, "id": "src7004.java.MongoTemplateTests.returnsEntityWhenQueryingForDateTime()"}, {"attr": {"type": "method", "name": "removesEntityFromCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removesEntityFromCollection()"}, {"attr": {"type": "method", "name": "removesEntityWithAnnotatedIdIfIdNeedsMassaging", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removesEntityWithAnnotatedIdIfIdNeedsMassaging()"}, {"attr": {"type": "method", "name": "executesQueryWithNegatedRegexCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.executesQueryWithNegatedRegexCorrectly()"}, {"attr": {"type": "method", "name": "storesAndRemovesTypeWithComplexId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.storesAndRemovesTypeWithComplexId()"}, {"attr": {"type": "method", "name": "exceutesBasicQueryCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.exceutesBasicQueryCorrectly()"}, {"attr": {"type": "method", "name": "optimisticLockingHandling", "nullable": false}, "id": "src7004.java.MongoTemplateTests.optimisticLockingHandling()"}, {"attr": {"type": "method", "name": "optimisticLockingHandlingWithExistingId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.optimisticLockingHandlingWithExistingId()"}, {"attr": {"type": "method", "name": "doesNotFailOnVersionInitForUnversionedEntity", "nullable": false}, "id": "src7004.java.MongoTemplateTests.doesNotFailOnVersionInitForUnversionedEntity()"}, {"attr": {"type": "method", "name": "doesNotFailOnInsertForEntityWithNonAutogeneratableId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.doesNotFailOnInsertForEntityWithNonAutogeneratableId()"}, {"attr": {"type": "method", "name": "removesObjectFromExplicitCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removesObjectFromExplicitCollection()"}, {"attr": {"type": "method", "name": "savesMapCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.savesMapCorrectly()"}, {"attr": {"type": "method", "name": "savesMongoPrimitiveObjectCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.savesMongoPrimitiveObjectCorrectly()"}, {"attr": {"type": "method", "name": "rejectsNullObjectToBeSaved", "nullable": false}, "id": "src7004.java.MongoTemplateTests.rejectsNullObjectToBeSaved()"}, {"attr": {"type": "method", "name": "savesPlainDocumentCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.savesPlainDocumentCorrectly()"}, {"attr": {"type": "method", "name": "rejectsPlainObjectWithOutExplicitCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.rejectsPlainObjectWithOutExplicitCollection()"}, {"attr": {"type": "method", "name": "readsPlainDocumentById", "nullable": false}, "id": "src7004.java.MongoTemplateTests.readsPlainDocumentById()"}, {"attr": {"type": "method", "name": "writesPlainString", "nullable": false}, "id": "src7004.java.MongoTemplateTests.writesPlainString()"}, {"attr": {"type": "method", "name": "rejectsNonJsonStringForSave", "nullable": false}, "id": "src7004.java.MongoTemplateTests.rejectsNonJsonStringForSave()"}, {"attr": {"type": "method", "name": "initializesVersionOnInsert", "nullable": false}, "id": "src7004.java.MongoTemplateTests.initializesVersionOnInsert()"}, {"attr": {"type": "method", "name": "removeVersionedEntityConsidersVersion", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removeVersionedEntityConsidersVersion()"}, {"attr": {"type": "method", "name": "initializesVersionOnBatchInsert", "nullable": false}, "id": "src7004.java.MongoTemplateTests.initializesVersionOnBatchInsert()"}, {"attr": {"type": "method", "name": "initializesIdAndVersionAndOfImmutableObject", "nullable": false}, "id": "src7004.java.MongoTemplateTests.initializesIdAndVersionAndOfImmutableObject()"}, {"attr": {"type": "method", "name": "queryCantBeNull", "nullable": false}, "id": "src7004.java.MongoTemplateTests.queryCantBeNull()"}, {"attr": {"type": "method", "name": "versionsObjectIntoDedicatedCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.versionsObjectIntoDedicatedCollection()"}, {"attr": {"type": "method", "name": "correctlySetsLongVersionProperty", "nullable": false}, "id": "src7004.java.MongoTemplateTests.correctlySetsLongVersionProperty()"}, {"attr": {"type": "method", "name": "preventsDuplicateInsert", "nullable": false}, "id": "src7004.java.MongoTemplateTests.preventsDuplicateInsert()"}, {"attr": {"type": "method", "name": "countAndFindWithoutTypeInformation", "nullable": false}, "id": "src7004.java.MongoTemplateTests.countAndFindWithoutTypeInformation()"}, {"attr": {"type": "method", "name": "nullsPropertiesForVersionObjectUpdates", "nullable": false}, "id": "src7004.java.MongoTemplateTests.nullsPropertiesForVersionObjectUpdates()"}, {"attr": {"type": "method", "name": "nullsValuesForUpdatesOfUnversionedEntity", "nullable": false}, "id": "src7004.java.MongoTemplateTests.nullsValuesForUpdatesOfUnversionedEntity()"}, {"attr": {"type": "method", "name": "savesJsonStringCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.savesJsonStringCorrectly()"}, {"attr": {"type": "method", "name": "executesExistsCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.executesExistsCorrectly()"}, {"attr": {"type": "method", "name": "updateConsidersMappingAnnotations", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateConsidersMappingAnnotations()"}, {"attr": {"type": "method", "name": "findsEntityByDateReference", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findsEntityByDateReference()"}, {"attr": {"type": "method", "name": "nativeDriverDateTimeCodecShouldBeApplied", "nullable": false}, "id": "src7004.java.MongoTemplateTests.nativeDriverDateTimeCodecShouldBeApplied()"}, {"attr": {"type": "method", "name": "findOneAfterUpsertForNonExistingObjectReturnsTheInsertedObject", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findOneAfterUpsertForNonExistingObjectReturnsTheInsertedObject()"}, {"attr": {"type": "method", "name": "updatesShouldRetainTypeInformation", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesShouldRetainTypeInformation()"}, {"attr": {"type": "method", "name": "queryShouldSupportRealAndAliasedPropertyNamesForFieldInclusions", "nullable": false}, "id": "src7004.java.MongoTemplateTests.queryShouldSupportRealAndAliasedPropertyNamesForFieldInclusions()"}, {"attr": {"type": "method", "name": "queryShouldSupportRealAndAliasedPropertyNamesForFieldExclusions", "nullable": false}, "id": "src7004.java.MongoTemplateTests.queryShouldSupportRealAndAliasedPropertyNamesForFieldExclusions()"}, {"attr": {"type": "method", "name": "findMultipleWithQueryShouldSupportRealAndAliasedPropertyNamesForFieldExclusions", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findMultipleWithQueryShouldSupportRealAndAliasedPropertyNamesForFieldExclusions()"}, {"attr": {"type": "method", "name": "queryShouldSupportNestedPropertyNamesForFieldInclusions", "nullable": false}, "id": "src7004.java.MongoTemplateTests.queryShouldSupportNestedPropertyNamesForFieldInclusions()"}, {"attr": {"type": "method", "name": "aQueryRestrictedWithOneRestrictedResultTypeShouldReturnOnlyInstancesOfTheRestrictedType", "nullable": false}, "id": "src7004.java.MongoTemplateTests.aQueryRestrictedWithOneRestrictedResultTypeShouldReturnOnlyInstancesOfTheRestrictedType()"}, {"attr": {"type": "method", "name": "aQueryRestrictedWithMultipleRestrictedResultTypesShouldReturnOnlyInstancesOfTheRestrictedTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.aQueryRestrictedWithMultipleRestrictedResultTypesShouldReturnOnlyInstancesOfTheRestrictedTypes()"}, {"attr": {"type": "method", "name": "aQueryWithNoRestrictedResultTypesShouldReturnAllInstancesWithinTheGivenCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.aQueryWithNoRestrictedResultTypesShouldReturnAllInstancesWithinTheGivenCollection()"}, {"attr": {"type": "method", "name": "allowInsertWithPlainJsonString", "nullable": false}, "id": "src7004.java.MongoTemplateTests.allowInsertWithPlainJsonString()"}, {"attr": {"type": "method", "name": "allowInsertOfDbObjectWithMappedTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.allowInsertOfDbObjectWithMappedTypes()"}, {"attr": {"type": "method", "name": "shouldExecuteQueryShouldMapQueryBeforeQueryExecution", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldExecuteQueryShouldMapQueryBeforeQueryExecution()"}, {"attr": {"type": "method", "name": "updateFirstShouldIncreaseVersionForVersionedEntity", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateFirstShouldIncreaseVersionForVersionedEntity()"}, {"attr": {"type": "method", "name": "updateFirstShouldIncreaseVersionOnlyForFirstMatchingEntity", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateFirstShouldIncreaseVersionOnlyForFirstMatchingEntity()"}, {"attr": {"type": "method", "name": "updateMultiShouldIncreaseVersionOfAllUpdatedEntities", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateMultiShouldIncreaseVersionOfAllUpdatedEntities()"}, {"attr": {"type": "method", "name": "itShouldBePossibleToReuseAnExistingQuery", "nullable": false}, "id": "src7004.java.MongoTemplateTests.itShouldBePossibleToReuseAnExistingQuery()"}, {"attr": {"type": "method", "name": "findAndModifyShouldRetrainTypeInformationWithinUpdatedType", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldRetrainTypeInformationWithinUpdatedType()"}, {"attr": {"type": "method", "name": "findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnDocumentWithNestedCollectionWhenWholeCollectionIsReplaced", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnDocumentWithNestedCollectionWhenWholeCollectionIsReplaced()"}, {"attr": {"type": "method", "name": "findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnDocumentWithNestedCollectionWhenFirstElementIsReplaced", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnDocumentWithNestedCollectionWhenFirstElementIsReplaced()"}, {"attr": {"type": "method", "name": "findAndModifyShouldAddTypeInformationOnDocumentWithNestedCollectionObjectInsertedAtSecondIndex", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationOnDocumentWithNestedCollectionObjectInsertedAtSecondIndex()"}, {"attr": {"type": "method", "name": "findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenUpdatingPositionedElement", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenUpdatingPositionedElement()"}, {"attr": {"type": "method", "name": "findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenUpdatingSecondElement", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenUpdatingSecondElement()"}, {"attr": {"type": "method", "name": "findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenRewriting", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenRewriting()"}, {"attr": {"type": "method", "name": "findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnDocumentWithNestedLists", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnDocumentWithNestedLists()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldReplaceDocument", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldReplaceDocument()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldErrorOnIdPresent", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldErrorOnIdPresent()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldErrorOnSkip", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldErrorOnSkip()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldErrorOnLimit", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldErrorOnLimit()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldConsiderSortAndUpdateFirstIfMultipleFound", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldConsiderSortAndUpdateFirstIfMultipleFound()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldReplaceObject", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldReplaceObject()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldConsiderFields", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldConsiderFields()"}, {"attr": {"type": "method", "name": "findAndReplaceNonExistingWithUpsertFalse", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceNonExistingWithUpsertFalse()"}, {"attr": {"type": "method", "name": "findAndReplaceNonExistingWithUpsertTrue", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceNonExistingWithUpsertTrue()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldReplaceObjectReturingNew", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldReplaceObjectReturingNew()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldProjectReturnedObjectCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldProjectReturnedObjectCorrectly()"}, {"attr": {"type": "method", "name": "findAndReplaceShouldAllowNativeDomainTypesAndReturnAProjection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndReplaceShouldAllowNativeDomainTypesAndReturnAProjection()"}, {"attr": {"type": "method", "name": "updatesShouldRetainTypeInformationEvenForCollections", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesShouldRetainTypeInformationEvenForCollections()"}, {"attr": {"type": "method", "name": "updateMultiShouldAddValuesCorrectlyWhenUsingPushEachWithComplexTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateMultiShouldAddValuesCorrectlyWhenUsingPushEachWithComplexTypes()"}, {"attr": {"type": "method", "name": "updateMultiShouldAddValuesCorrectlyWhenUsingPushEachWithSimpleTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateMultiShouldAddValuesCorrectlyWhenUsingPushEachWithSimpleTypes()"}, {"attr": {"type": "method", "name": "updateFirstShouldDoNothingWhenCalledForEntitiesThatDoNotExist", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateFirstShouldDoNothingWhenCalledForEntitiesThatDoNotExist()"}, {"attr": {"type": "method", "name": "updateWithPullShouldRemoveNestedItemFromDbRefAnnotatedCollection", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateWithPullShouldRemoveNestedItemFromDbRefAnnotatedCollection()"}, {"attr": {"type": "method", "name": "updateWithPullShouldRemoveNestedItemFromDbRefAnnotatedCollectionWhenGivenAnIdValueOfComponentTypeEntity", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateWithPullShouldRemoveNestedItemFromDbRefAnnotatedCollectionWhenGivenAnIdValueOfComponentTypeEntity()"}, {"attr": {"type": "method", "name": "updateShouldNotBumpVersionNumberIfVersionPropertyIncludedInUpdate", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateShouldNotBumpVersionNumberIfVersionPropertyIncludedInUpdate()"}, {"attr": {"type": "method", "name": "shouldBeAbleToUpdateDbRefPropertyWithDomainObject", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldBeAbleToUpdateDbRefPropertyWithDomainObject()"}, {"attr": {"type": "method", "name": "testUpdateShouldWorkForPathsOnInterfaceMethods", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testUpdateShouldWorkForPathsOnInterfaceMethods()"}, {"attr": {"type": "method", "name": "testShouldSupportQueryWithIncludedDbRefField", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testShouldSupportQueryWithIncludedDbRefField()"}, {"attr": {"type": "method", "name": "testFindAllAndRemoveFullyReturnsAndRemovesDocuments", "nullable": false}, "id": "src7004.java.MongoTemplateTests.testFindAllAndRemoveFullyReturnsAndRemovesDocuments()"}, {"attr": {"type": "method", "name": "shouldAllowSavingOfLazyLoadedDbRefs", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldAllowSavingOfLazyLoadedDbRefs()"}, {"attr": {"type": "method", "name": "savingAndReassigningLazyLoadingProxies", "nullable": false}, "id": "src7004.java.MongoTemplateTests.savingAndReassigningLazyLoadingProxies()"}, {"attr": {"type": "method", "name": "callingNonObjectMethodsOnLazyLoadingProxyShouldReturnNullIfUnderlyingDbrefWasDeletedInbetween", "nullable": false}, "id": "src7004.java.MongoTemplateTests.callingNonObjectMethodsOnLazyLoadingProxyShouldReturnNullIfUnderlyingDbrefWasDeletedInbetween()"}, {"attr": {"type": "method", "name": "updateMultiShouldAddValuesCorrectlyWhenUsingAddToSetWithEach", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateMultiShouldAddValuesCorrectlyWhenUsingAddToSetWithEach()"}, {"attr": {"type": "method", "name": "findAndModifyAddToSetWithEachShouldNotAddDuplicatesNorTypeHintForSimpleDocuments", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndModifyAddToSetWithEachShouldNotAddDuplicatesNorTypeHintForSimpleDocuments()"}, {"attr": {"type": "method", "name": "sortOnIdFieldPropertyShouldBeMappedCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.sortOnIdFieldPropertyShouldBeMappedCorrectly()"}, {"attr": {"type": "method", "name": "sortOnAnnotatedFieldPropertyShouldBeMappedCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.sortOnAnnotatedFieldPropertyShouldBeMappedCorrectly()"}, {"attr": {"type": "method", "name": "shouldRetrieveInitializedValueFromDbRefAssociationAfterLoad", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldRetrieveInitializedValueFromDbRefAssociationAfterLoad()"}, {"attr": {"type": "method", "name": "shouldReuseExistingDBRefInQueryFromDbRefAssociationAfterLoad", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldReuseExistingDBRefInQueryFromDbRefAssociationAfterLoad()"}, {"attr": {"type": "method", "name": "insertsAndRemovesBasicDocumentCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.insertsAndRemovesBasicDocumentCorrectly()"}, {"attr": {"type": "method", "name": "ignoresNullElementsForInsertAll", "nullable": false}, "id": "src7004.java.MongoTemplateTests.ignoresNullElementsForInsertAll()"}, {"attr": {"type": "method", "name": "generatesIdForInsertAll", "nullable": false}, "id": "src7004.java.MongoTemplateTests.generatesIdForInsertAll()"}, {"attr": {"type": "method", "name": "takesSortIntoAccountWhenStreaming", "nullable": false}, "id": "src7004.java.MongoTemplateTests.takesSortIntoAccountWhenStreaming()"}, {"attr": {"type": "method", "name": "takesLimitIntoAccountWhenStreaming", "nullable": false}, "id": "src7004.java.MongoTemplateTests.takesLimitIntoAccountWhenStreaming()"}, {"attr": {"type": "method", "name": "resolvesCyclicDBRefCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.resolvesCyclicDBRefCorrectly()"}, {"attr": {"type": "method", "name": "shouldReuseAlreadyResolvedLazyLoadedDBRefWhenUsedAsPersistenceConstructorArgument", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldReuseAlreadyResolvedLazyLoadedDBRefWhenUsedAsPersistenceConstructorArgument()"}, {"attr": {"type": "method", "name": "shouldNotReuseLazyLoadedDBRefWhenTypeUsedInPersistenceConstrcutorButValueRefersToAnotherProperty", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldNotReuseLazyLoadedDBRefWhenTypeUsedInPersistenceConstrcutorButValueRefersToAnotherProperty()"}, {"attr": {"type": "method", "name": "shouldRespectParameterValueWhenAttemptingToReuseLazyLoadedDBRefUsedInPersistenceConstructor", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldRespectParameterValueWhenAttemptingToReuseLazyLoadedDBRefUsedInPersistenceConstructor()"}, {"attr": {"type": "method", "name": "updateShouldWorkForTypesContainingGeoJsonTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updateShouldWorkForTypesContainingGeoJsonTypes()"}, {"attr": {"type": "method", "name": "updatesDateValueCorrectlyWhenUsingMinOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesDateValueCorrectlyWhenUsingMinOperator()"}, {"attr": {"type": "method", "name": "updatesNumericValueCorrectlyWhenUsingMinOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesNumericValueCorrectlyWhenUsingMinOperator()"}, {"attr": {"type": "method", "name": "updatesDateValueCorrectlyWhenUsingMaxOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesDateValueCorrectlyWhenUsingMaxOperator()"}, {"attr": {"type": "method", "name": "updatesNumericValueCorrectlyWhenUsingMaxOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesNumericValueCorrectlyWhenUsingMaxOperator()"}, {"attr": {"type": "method", "name": "updatesBigNumberValueUsingStringComparisonWhenUsingMaxOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesBigNumberValueUsingStringComparisonWhenUsingMaxOperator()"}, {"attr": {"type": "method", "name": "updatesBigNumberValueUsingStringComparisonWhenUsingMinOperator", "nullable": false}, "id": "src7004.java.MongoTemplateTests.updatesBigNumberValueUsingStringComparisonWhenUsingMinOperator()"}, {"attr": {"type": "method", "name": "streamExecutionUsesExplicitCollectionName", "nullable": false}, "id": "src7004.java.MongoTemplateTests.streamExecutionUsesExplicitCollectionName()"}, {"attr": {"type": "method", "name": "shouldFetchListOfReferencesCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFetchListOfReferencesCorrectly()"}, {"attr": {"type": "method", "name": "shouldFetchListOfLazyReferencesCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFetchListOfLazyReferencesCorrectly()"}, {"attr": {"type": "method", "name": "shouldFetchMapOfLazyReferencesCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFetchMapOfLazyReferencesCorrectly()"}, {"attr": {"type": "method", "name": "shouldFetchLazyReferenceWithConstructorCreationCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFetchLazyReferenceWithConstructorCreationCorrectly()"}, {"attr": {"type": "method", "name": "shouldFetchMapOfLazyReferencesWithConstructorCreationCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFetchMapOfLazyReferencesWithConstructorCreationCorrectly()"}, {"attr": {"type": "method", "name": "shouldFetchListOfLazyReferencesWithConstructorCreationCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFetchListOfLazyReferencesWithConstructorCreationCorrectly()"}, {"attr": {"type": "method", "name": "populatesIdsAddedByEventListener", "nullable": false}, "id": "src7004.java.MongoTemplateTests.populatesIdsAddedByEventListener()"}, {"attr": {"type": "method", "name": "afterSaveEventContainsSavedObjectUsingInsertAll", "nullable": false}, "id": "src7004.java.MongoTemplateTests.afterSaveEventContainsSavedObjectUsingInsertAll()"}, {"attr": {"type": "method", "name": "afterSaveEventContainsSavedObjectUsingInsert", "nullable": false}, "id": "src7004.java.MongoTemplateTests.afterSaveEventContainsSavedObjectUsingInsert()"}, {"attr": {"type": "method", "name": "findsByGenericNestedListElements", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findsByGenericNestedListElements()"}, {"attr": {"type": "method", "name": "decimal128TypeShouldBeSavedAndLoadedCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.decimal128TypeShouldBeSavedAndLoadedCorrectly()"}, {"attr": {"type": "method", "name": "findAndRemoveAllWithoutExplicitDomainTypeShouldRemoveAndReturnEntitiesCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findAndRemoveAllWithoutExplicitDomainTypeShouldRemoveAndReturnEntitiesCorrectly()"}, {"attr": {"type": "method", "name": "appliesQueryLimitToEmptyQuery", "nullable": false}, "id": "src7004.java.MongoTemplateTests.appliesQueryLimitToEmptyQuery()"}, {"attr": {"type": "method", "name": "removeShouldConsiderLimit", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removeShouldConsiderLimit()"}, {"attr": {"type": "method", "name": "removeShouldConsiderSkipAndSort", "nullable": false}, "id": "src7004.java.MongoTemplateTests.removeShouldConsiderSkipAndSort()"}, {"attr": {"type": "method", "name": "findByNestedDocumentWithStringIdMappingToObjectIdMatchesDocumentsCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.findByNestedDocumentWithStringIdMappingToObjectIdMatchesDocumentsCorrectly()"}, {"attr": {"type": "method", "name": "writesAuditingMetadataForImmutableTypes", "nullable": false}, "id": "src7004.java.MongoTemplateTests.writesAuditingMetadataForImmutableTypes()"}, {"attr": {"type": "method", "name": "saveAndLoadStringThatIsAnObjectIdAsString", "nullable": false}, "id": "src7004.java.MongoTemplateTests.saveAndLoadStringThatIsAnObjectIdAsString()"}, {"attr": {"type": "method", "name": "insertHonorsExistingRawId", "nullable": false}, "id": "src7004.java.MongoTemplateTests.insertHonorsExistingRawId()"}, {"attr": {"type": "method", "name": "saveShouldGenerateNewIdOfTypeIfExplicitlyDefined", "nullable": false}, "id": "src7004.java.MongoTemplateTests.saveShouldGenerateNewIdOfTypeIfExplicitlyDefined()"}, {"attr": {"type": "method", "name": "insertShouldGenerateNewIdOfTypeIfExplicitlyDefined", "nullable": false}, "id": "src7004.java.MongoTemplateTests.insertShouldGenerateNewIdOfTypeIfExplicitlyDefined()"}, {"attr": {"type": "method", "name": "shouldNotConvertStringToObjectIdForNonIdField", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldNotConvertStringToObjectIdForNonIdField()"}, {"attr": {"type": "method", "name": "shouldProjectWithCollections", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldProjectWithCollections()"}, {"attr": {"type": "method", "name": "sortOnIdFieldWithExplicitTypeShouldWork", "nullable": false}, "id": "src7004.java.MongoTemplateTests.sortOnIdFieldWithExplicitTypeShouldWork()"}, {"attr": {"type": "method", "name": "shouldWriteSubdocumentWithNullCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldWriteSubdocumentWithNullCorrectly()"}, {"attr": {"type": "method", "name": "shouldUpdateSubdocumentWithNullCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldUpdateSubdocumentWithNullCorrectly()"}, {"attr": {"type": "method", "name": "shouldFindSubdocumentWithNullCorrectly", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldFindSubdocumentWithNullCorrectly()"}, {"attr": {"type": "method", "name": "sliceShouldLimitCollectionValues", "nullable": false}, "id": "src7004.java.MongoTemplateTests.sliceShouldLimitCollectionValues()"}, {"attr": {"type": "method", "name": "shouldExecuteQueryWithExpression", "nullable": false}, "id": "src7004.java.MongoTemplateTests.shouldExecuteQueryWithExpression()"}, {"attr": {"type": "method", "name": "createAfterSaveReference", "nullable": false}, "id": "src7004.java.MongoTemplateTests.createAfterSaveReference()"}, {"attr": {"type": "field", "name": "DB_NAME", "nullable": false}, "id": "src7004.java.MongoTemplateTests.DB_NAME"}, {"attr": {"type": "field", "name": "client", "nullable": false}, "id": "src7004.java.MongoTemplateTests.client"}, {"attr": {"type": "field", "name": "context", "nullable": false}, "id": "src7004.java.MongoTemplateTests.context"}, {"attr": {"type": "field", "name": "template", "nullable": false}, "id": "src7004.java.MongoTemplateTests.template"}, {"attr": {"type": "field", "name": "mappingTemplate", "nullable": false}, "id": "src7004.java.MongoTemplateTests.mappingTemplate"}, {"attr": {"type": "field", "name": "factory", "nullable": false}, "id": "src7004.java.MongoTemplateTests.factory"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_333_21"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_371_32"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1173_12"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1183_12"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1190_82"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1276_17"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1294_17"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1327_72"}, {"id": "src7004.java.count"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1327_89"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1332_72"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1337_72"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1337_87"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1540_71"}, {"id": "src7004.java.save"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1641_37"}, {"id": "src7004.java.find"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1678_20"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1705_22"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1706_21"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1715_81"}, {"id": "src7004.java.containsEntry"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_1724_23"}, {"id": "src7004.java.setFirstName"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_2904_42"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_2912_68"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_2912_97"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3029_45"}, {"id": "src7004.java.asList"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3040_30"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3041_29"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3131_5"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3427_106"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3428_5"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3428_11"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3452_106"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3452_112"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3453_5"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3475_106"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3475_112"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3476_11"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3552_86"}, {"id": "src7004.java.resolveClassName"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3646_50"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3646_56"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3710_11"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3726_11"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3797_32"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3814_12"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3815_21"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3821_32"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3912_44"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3913_40"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3922_15"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3929_21"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3930_28"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3936_17"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_3937_24"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4011_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4107_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4141_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4209_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4256_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4290_21"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4290_28"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4299_21"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4299_28"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4349_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4425_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4504_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4578_26"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4646_9"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4646_15"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4694_13"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src7004.java.null_4735_13"}], "links": [{"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.cleanUp()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.insertsSimpleEntityCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.bogusUpdateDoesNotTriggerException()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.throwsExceptionForDuplicateIds()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.throwsExceptionForUpdateWithInvalidPushOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.throwsExceptionForIndexViolationIfConfigured()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.rejectsDuplicateIdInInsertAll()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.createCappedCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.getCollectionInfo()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testEnsureIndex()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testReadIndexInfoForIndicesCreatedViaMongoShellCommands()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypesWithMappingMongoConverter()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.checkCollectionContents()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testFindAndUpdate()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testFindAndUpdateUpsert()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testFindAndRemove()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testDistinct()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testDistinctCovertsResultToPropertyTargetTypeCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testDistinctResolvesDbRefsCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithObjectId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithStringId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithLongId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithBigIntegerId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingAnInQueryWithPrimitiveIntId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingInQueryWithList()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingRegexQueryWithOptions()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingAnOrQuery()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingUpdateWithMultipleSet()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testRemovingDocument()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testAddingToList()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testFindOneWithSort()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUsingReadPreference()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removingNullIsANoOp()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesObjectIdsCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testWriteConcernResolver()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesDBRefsCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.executeDocument()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.executeDocumentWithCursorPreparer()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.countsDocumentsCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.countRejectsNullEntityClass()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.countRejectsEmptyCollectionName()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.countRejectsNullCollectionName()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.returnsEntityWhenQueryingForDateTime()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removesEntityFromCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removesEntityWithAnnotatedIdIfIdNeedsMassaging()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.executesQueryWithNegatedRegexCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.storesAndRemovesTypeWithComplexId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.exceutesBasicQueryCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.optimisticLockingHandling()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.optimisticLockingHandlingWithExistingId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.doesNotFailOnVersionInitForUnversionedEntity()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.doesNotFailOnInsertForEntityWithNonAutogeneratableId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removesObjectFromExplicitCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.savesMapCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.savesMongoPrimitiveObjectCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.rejectsNullObjectToBeSaved()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.savesPlainDocumentCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.rejectsPlainObjectWithOutExplicitCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.readsPlainDocumentById()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.writesPlainString()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.rejectsNonJsonStringForSave()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.initializesVersionOnInsert()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removeVersionedEntityConsidersVersion()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.initializesVersionOnBatchInsert()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.initializesIdAndVersionAndOfImmutableObject()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.queryCantBeNull()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.versionsObjectIntoDedicatedCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.correctlySetsLongVersionProperty()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.preventsDuplicateInsert()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.countAndFindWithoutTypeInformation()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.nullsPropertiesForVersionObjectUpdates()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.nullsValuesForUpdatesOfUnversionedEntity()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.savesJsonStringCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.executesExistsCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateConsidersMappingAnnotations()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findsEntityByDateReference()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.nativeDriverDateTimeCodecShouldBeApplied()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findOneAfterUpsertForNonExistingObjectReturnsTheInsertedObject()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesShouldRetainTypeInformation()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.queryShouldSupportRealAndAliasedPropertyNamesForFieldInclusions()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.queryShouldSupportRealAndAliasedPropertyNamesForFieldExclusions()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findMultipleWithQueryShouldSupportRealAndAliasedPropertyNamesForFieldExclusions()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.queryShouldSupportNestedPropertyNamesForFieldInclusions()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.aQueryRestrictedWithOneRestrictedResultTypeShouldReturnOnlyInstancesOfTheRestrictedType()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.aQueryRestrictedWithMultipleRestrictedResultTypesShouldReturnOnlyInstancesOfTheRestrictedTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.aQueryWithNoRestrictedResultTypesShouldReturnAllInstancesWithinTheGivenCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.allowInsertWithPlainJsonString()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.allowInsertOfDbObjectWithMappedTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldExecuteQueryShouldMapQueryBeforeQueryExecution()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateFirstShouldIncreaseVersionForVersionedEntity()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateFirstShouldIncreaseVersionOnlyForFirstMatchingEntity()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateMultiShouldIncreaseVersionOfAllUpdatedEntities()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.itShouldBePossibleToReuseAnExistingQuery()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldRetrainTypeInformationWithinUpdatedType()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnDocumentWithNestedCollectionWhenWholeCollectionIsReplaced()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnDocumentWithNestedCollectionWhenFirstElementIsReplaced()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationOnDocumentWithNestedCollectionObjectInsertedAtSecondIndex()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldRetainTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenUpdatingPositionedElement()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenUpdatingSecondElement()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnEmbeddedDocumentWithCollectionWhenRewriting()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyShouldAddTypeInformationWithinUpdatedTypeOnDocumentWithNestedLists()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldReplaceDocument()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldErrorOnIdPresent()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldErrorOnSkip()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldErrorOnLimit()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldConsiderSortAndUpdateFirstIfMultipleFound()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldReplaceObject()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldConsiderFields()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceNonExistingWithUpsertFalse()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceNonExistingWithUpsertTrue()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldReplaceObjectReturingNew()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldProjectReturnedObjectCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndReplaceShouldAllowNativeDomainTypesAndReturnAProjection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesShouldRetainTypeInformationEvenForCollections()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateMultiShouldAddValuesCorrectlyWhenUsingPushEachWithComplexTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateMultiShouldAddValuesCorrectlyWhenUsingPushEachWithSimpleTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateFirstShouldDoNothingWhenCalledForEntitiesThatDoNotExist()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateWithPullShouldRemoveNestedItemFromDbRefAnnotatedCollection()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateWithPullShouldRemoveNestedItemFromDbRefAnnotatedCollectionWhenGivenAnIdValueOfComponentTypeEntity()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateShouldNotBumpVersionNumberIfVersionPropertyIncludedInUpdate()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldBeAbleToUpdateDbRefPropertyWithDomainObject()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testUpdateShouldWorkForPathsOnInterfaceMethods()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testShouldSupportQueryWithIncludedDbRefField()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.testFindAllAndRemoveFullyReturnsAndRemovesDocuments()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldAllowSavingOfLazyLoadedDbRefs()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.savingAndReassigningLazyLoadingProxies()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.callingNonObjectMethodsOnLazyLoadingProxyShouldReturnNullIfUnderlyingDbrefWasDeletedInbetween()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateMultiShouldAddValuesCorrectlyWhenUsingAddToSetWithEach()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndModifyAddToSetWithEachShouldNotAddDuplicatesNorTypeHintForSimpleDocuments()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.sortOnIdFieldPropertyShouldBeMappedCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.sortOnAnnotatedFieldPropertyShouldBeMappedCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldRetrieveInitializedValueFromDbRefAssociationAfterLoad()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldReuseExistingDBRefInQueryFromDbRefAssociationAfterLoad()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.insertsAndRemovesBasicDocumentCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.ignoresNullElementsForInsertAll()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.generatesIdForInsertAll()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.takesSortIntoAccountWhenStreaming()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.takesLimitIntoAccountWhenStreaming()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.resolvesCyclicDBRefCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldReuseAlreadyResolvedLazyLoadedDBRefWhenUsedAsPersistenceConstructorArgument()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldNotReuseLazyLoadedDBRefWhenTypeUsedInPersistenceConstrcutorButValueRefersToAnotherProperty()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldRespectParameterValueWhenAttemptingToReuseLazyLoadedDBRefUsedInPersistenceConstructor()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updateShouldWorkForTypesContainingGeoJsonTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesDateValueCorrectlyWhenUsingMinOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesNumericValueCorrectlyWhenUsingMinOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesDateValueCorrectlyWhenUsingMaxOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesNumericValueCorrectlyWhenUsingMaxOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesBigNumberValueUsingStringComparisonWhenUsingMaxOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.updatesBigNumberValueUsingStringComparisonWhenUsingMinOperator()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.streamExecutionUsesExplicitCollectionName()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFetchListOfReferencesCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFetchListOfLazyReferencesCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFetchMapOfLazyReferencesCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFetchLazyReferenceWithConstructorCreationCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFetchMapOfLazyReferencesWithConstructorCreationCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFetchListOfLazyReferencesWithConstructorCreationCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.populatesIdsAddedByEventListener()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.afterSaveEventContainsSavedObjectUsingInsertAll()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.afterSaveEventContainsSavedObjectUsingInsert()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findsByGenericNestedListElements()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.decimal128TypeShouldBeSavedAndLoadedCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findAndRemoveAllWithoutExplicitDomainTypeShouldRemoveAndReturnEntitiesCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.appliesQueryLimitToEmptyQuery()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removeShouldConsiderLimit()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.removeShouldConsiderSkipAndSort()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.findByNestedDocumentWithStringIdMappingToObjectIdMatchesDocumentsCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.writesAuditingMetadataForImmutableTypes()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.saveAndLoadStringThatIsAnObjectIdAsString()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.insertHonorsExistingRawId()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.saveShouldGenerateNewIdOfTypeIfExplicitlyDefined()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.insertShouldGenerateNewIdOfTypeIfExplicitlyDefined()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldNotConvertStringToObjectIdForNonIdField()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldProjectWithCollections()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.sortOnIdFieldWithExplicitTypeShouldWork()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldWriteSubdocumentWithNullCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldUpdateSubdocumentWithNullCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldFindSubdocumentWithNullCorrectly()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.sliceShouldLimitCollectionValues()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.shouldExecuteQueryWithExpression()"}, {"type": "contains", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.createAfterSaveReference()"}, {"type": "has_field", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.DB_NAME"}, {"type": "has_field", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.client"}, {"type": "has_field", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.context"}, {"type": "has_field", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.template"}, {"type": "has_field", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.mappingTemplate"}, {"type": "has_field", "source": "src7004.java.MongoTemplateTests", "target": "src7004.java.MongoTemplateTests.factory"}, {"type": "has_parameter", "source": "src7004.java.MongoTemplateTests.getCollectionInfo()", "target": "src7004.java.MongoTemplateTests.getCollectionInfo().collectionName"}, {"type": "has_parameter", "source": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypes()", "target": "src7004.java.MongoTemplateTests.testProperHandlingOfDifferentIdTypes().mongoTemplate"}, {"type": "has_parameter", "source": "src7004.java.MongoTemplateTests.checkCollectionContents()", "target": "src7004.java.MongoTemplateTests.checkCollectionContents().entityClass"}, {"type": "has_parameter", "source": "src7004.java.MongoTemplateTests.checkCollectionContents()", "target": "src7004.java.MongoTemplateTests.checkCollectionContents().count"}, {"type": "contains", "source": "src7004.java.count", "target": "src7004.java.null_1327_72"}, {"type": "contains", "source": "src7004.java.count", "target": "src7004.java.null_1332_72"}, {"type": "contains", "source": "src7004.java.count", "target": "src7004.java.null_1337_72"}, {"type": "contains", "source": "src7004.java.save", "target": "src7004.java.null_1540_71"}, {"type": "contains", "source": "src7004.java.find", "target": "src7004.java.null_1641_37"}, {"type": "contains", "source": "src7004.java.containsEntry", "target": "src7004.java.null_1715_81"}, {"type": "contains", "source": "src7004.java.containsEntry", "target": "src7004.java.null_3797_32"}, {"type": "contains", "source": "src7004.java.containsEntry", "target": "src7004.java.null_3821_32"}, {"type": "contains", "source": "src7004.java.setFirstName", "target": "src7004.java.null_1724_23"}, {"type": "contains", "source": "src7004.java.asList", "target": "src7004.java.null_3029_45"}, {"type": "contains", "source": "src7004.java.resolveClassName", "target": "src7004.java.null_3552_86"}]}
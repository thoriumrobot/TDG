{"directed": true, "multigraph": false, "graph": {}, "nodes": [{"attr": {"type": "class", "name": "ArgumentTypeResolver", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver"}, {"attr": {"type": "method", "name": "setExpressionTypingServices", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.setExpressionTypingServices()"}, {"attr": {"type": "parameter", "name": "expressionTypingServices", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.setExpressionTypingServices().expressionTypingServices"}, {"attr": {"type": "method", "name": "setDoubleColonExpressionResolver", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.setDoubleColonExpressionResolver()"}, {"attr": {"type": "parameter", "name": "doubleColonExpressionResolver", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.setDoubleColonExpressionResolver().doubleColonExpressionResolver"}, {"attr": {"type": "method", "name": "isSubtypeOfForArgumentType", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType()"}, {"attr": {"type": "parameter", "name": "actualType", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType().actualType"}, {"attr": {"type": "parameter", "name": "expectedType", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType().expectedType"}, {"attr": {"type": "method", "name": "checkTypesWithNoCallee", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkTypesWithNoCallee()"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkTypesWithNoCallee().context"}, {"attr": {"type": "method", "name": "checkTypesForFunctionArgumentsWithNoCallee", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee()"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee().context"}, {"attr": {"type": "method", "name": "checkArgumentTypeWithNoCallee", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee()"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee().context"}, {"attr": {"type": "parameter", "name": "argumentExpression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee().argumentExpression"}, {"attr": {"type": "method", "name": "isFunctionLiteralArgument", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument().context"}, {"attr": {"type": "parameter", "name": "statementFilter", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument().statementFilter"}, {"attr": {"type": "method", "name": "isCallableReferenceArgument", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument().context"}, {"attr": {"type": "parameter", "name": "statementFilter", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument().statementFilter"}, {"attr": {"type": "method", "name": "isFunctionLiteralOrCallableReference", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference().context"}, {"attr": {"type": "parameter", "name": "statementFilter", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference().statementFilter"}, {"attr": {"type": "method", "name": "getFunctionLiteralArgumentIfAny", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny().context"}, {"attr": {"type": "parameter", "name": "statementFilter", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny().statementFilter"}, {"attr": {"type": "method", "name": "getCallableReferenceExpressionIfAny", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny().context"}, {"attr": {"type": "parameter", "name": "statementFilter", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny().statementFilter"}, {"attr": {"type": "method", "name": "isCollectionLiteralArgument", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCollectionLiteralArgument()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCollectionLiteralArgument().expression"}, {"attr": {"type": "method", "name": "getArgumentTypeInfo", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().context"}, {"attr": {"type": "parameter", "name": "resolveArgumentsMode", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().resolveArgumentsMode"}, {"attr": {"type": "parameter", "name": "suspendFunctionTypeExpected", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().suspendFunctionTypeExpected"}, {"attr": {"type": "method", "name": "convertSignedConstantToUnsigned", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned().context"}, {"attr": {"type": "method", "name": "constantCanBeConvertedToUnsigned", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.constantCanBeConvertedToUnsigned()"}, {"attr": {"type": "parameter", "name": "constant", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.constantCanBeConvertedToUnsigned().constant"}, {"attr": {"type": "method", "name": "getCallableReferenceTypeInfo", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().expression"}, {"attr": {"type": "parameter", "name": "callableReferenceExpression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().callableReferenceExpression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().context"}, {"attr": {"type": "parameter", "name": "resolveArgumentsMode", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().resolveArgumentsMode"}, {"attr": {"type": "method", "name": "getShapeTypeOfCallableReference", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference()"}, {"attr": {"type": "parameter", "name": "callableReferenceExpression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference().callableReferenceExpression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference().context"}, {"attr": {"type": "parameter", "name": "expectedTypeIsUnknown", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference().expectedTypeIsUnknown"}, {"attr": {"type": "method", "name": "isSingleAndPossibleTransformToSuccess", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isSingleAndPossibleTransformToSuccess()"}, {"attr": {"type": "parameter", "name": "overloadResolutionResults", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isSingleAndPossibleTransformToSuccess().overloadResolutionResults"}, {"attr": {"type": "method", "name": "getFunctionLiteralTypeInfo", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().expression"}, {"attr": {"type": "parameter", "name": "functionLiteral", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().functionLiteral"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().context"}, {"attr": {"type": "parameter", "name": "resolveArgumentsMode", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().resolveArgumentsMode"}, {"attr": {"type": "parameter", "name": "suspendFunctionTypeExpected", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().suspendFunctionTypeExpected"}, {"attr": {"type": "method", "name": "getShapeTypeOfFunctionLiteral", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()"}, {"attr": {"type": "parameter", "name": "function", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().function"}, {"attr": {"type": "parameter", "name": "scope", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().scope"}, {"attr": {"type": "parameter", "name": "trace", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().trace"}, {"attr": {"type": "parameter", "name": "expectedTypeIsUnknown", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().expectedTypeIsUnknown"}, {"attr": {"type": "parameter", "name": "suspendFunctionTypeExpected", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().suspendFunctionTypeExpected"}, {"attr": {"type": "method", "name": "resolveTypeRefWithDefault", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault()"}, {"attr": {"type": "parameter", "name": "returnTypeRef", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().returnTypeRef"}, {"attr": {"type": "parameter", "name": "scope", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().scope"}, {"attr": {"type": "parameter", "name": "trace", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().trace"}, {"attr": {"type": "parameter", "name": "defaultValue", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().defaultValue"}, {"attr": {"type": "method", "name": "analyzeArgumentsAndRecordTypes", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes()"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes().context"}, {"attr": {"type": "parameter", "name": "resolveArgumentsMode", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes().resolveArgumentsMode"}, {"attr": {"type": "method", "name": "updateResultArgumentTypeIfNotDenotable", "nullable": true}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().context"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().expression"}, {"attr": {"type": "parameter", "name": "trace", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().trace"}, {"attr": {"type": "parameter", "name": "statementFilter", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().statementFilter"}, {"attr": {"type": "parameter", "name": "expectedType", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().expectedType"}, {"attr": {"type": "parameter", "name": "targetType", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().targetType"}, {"attr": {"type": "method", "name": "isCollectionLiteralInsideAnnotation", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation()"}, {"attr": {"type": "parameter", "name": "expression", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation().expression"}, {"attr": {"type": "parameter", "name": "context", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation().context"}, {"attr": {"type": "field", "name": "typeResolver", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.typeResolver"}, {"attr": {"type": "field", "name": "builtIns", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.builtIns"}, {"attr": {"type": "field", "name": "reflectionTypes", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.reflectionTypes"}, {"attr": {"type": "field", "name": "constantExpressionEvaluator", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.constantExpressionEvaluator"}, {"attr": {"type": "field", "name": "functionPlaceholders", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.functionPlaceholders"}, {"attr": {"type": "field", "name": "moduleDescriptor", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.moduleDescriptor"}, {"attr": {"type": "field", "name": "kotlinTypeChecker", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.kotlinTypeChecker"}, {"attr": {"type": "field", "name": "expressionTypingServices", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.expressionTypingServices"}, {"attr": {"type": "field", "name": "doubleColonExpressionResolver", "nullable": false}, "id": "src1970.java.ArgumentTypeResolver.doubleColonExpressionResolver"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_116_39"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_125_34"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_139_39"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_159_80"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_171_84"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_204_16"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_224_16"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_238_27"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_243_40"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_248_44"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_266_33"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_326_42"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_326_55"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_330_33"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_330_46"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_342_61"}, {"id": "src1970.java.createFunctionType"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_342_117"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_349_24"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_376_49"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_380_72"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_380_128"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_391_25"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_397_30"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_398_121"}, {"id": "src1970.java.resolveTypeRefWithDefault"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_400_95"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_417_30"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_434_31"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_463_24"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_463_128"}, {"attr": {"type": "literal", "name": "null", "nullable": false}, "id": "src1970.java.null_489_16"}], "links": [{"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.setExpressionTypingServices()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.setDoubleColonExpressionResolver()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.checkTypesWithNoCallee()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isCollectionLiteralArgument()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.constantCanBeConvertedToUnsigned()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isSingleAndPossibleTransformToSuccess()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()"}, {"type": "contains", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation()"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.typeResolver"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.builtIns"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.reflectionTypes"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.constantExpressionEvaluator"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.functionPlaceholders"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.moduleDescriptor"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.kotlinTypeChecker"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.expressionTypingServices"}, {"type": "has_field", "source": "src1970.java.ArgumentTypeResolver", "target": "src1970.java.ArgumentTypeResolver.doubleColonExpressionResolver"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.setExpressionTypingServices()", "target": "src1970.java.ArgumentTypeResolver.setExpressionTypingServices().expressionTypingServices"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.setDoubleColonExpressionResolver()", "target": "src1970.java.ArgumentTypeResolver.setDoubleColonExpressionResolver().doubleColonExpressionResolver"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType()", "target": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType().actualType"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType()", "target": "src1970.java.ArgumentTypeResolver.isSubtypeOfForArgumentType().expectedType"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.checkTypesWithNoCallee()", "target": "src1970.java.ArgumentTypeResolver.checkTypesWithNoCallee().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee()", "target": "src1970.java.ArgumentTypeResolver.checkTypesForFunctionArgumentsWithNoCallee().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee()", "target": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee()", "target": "src1970.java.ArgumentTypeResolver.checkArgumentTypeWithNoCallee().argumentExpression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument()", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument()", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument()", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralArgument().statementFilter"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument()", "target": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument()", "target": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument()", "target": "src1970.java.ArgumentTypeResolver.isCallableReferenceArgument().statementFilter"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference()", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference()", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference()", "target": "src1970.java.ArgumentTypeResolver.isFunctionLiteralOrCallableReference().statementFilter"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralArgumentIfAny().statementFilter"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceExpressionIfAny().statementFilter"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isCollectionLiteralArgument()", "target": "src1970.java.ArgumentTypeResolver.isCollectionLiteralArgument().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().resolveArgumentsMode"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getArgumentTypeInfo().suspendFunctionTypeExpected"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned()", "target": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned()", "target": "src1970.java.ArgumentTypeResolver.convertSignedConstantToUnsigned().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.constantCanBeConvertedToUnsigned()", "target": "src1970.java.ArgumentTypeResolver.constantCanBeConvertedToUnsigned().constant"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().callableReferenceExpression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getCallableReferenceTypeInfo().resolveArgumentsMode"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference().callableReferenceExpression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfCallableReference().expectedTypeIsUnknown"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isSingleAndPossibleTransformToSuccess()", "target": "src1970.java.ArgumentTypeResolver.isSingleAndPossibleTransformToSuccess().overloadResolutionResults"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().functionLiteral"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().resolveArgumentsMode"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo()", "target": "src1970.java.ArgumentTypeResolver.getFunctionLiteralTypeInfo().suspendFunctionTypeExpected"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().function"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().scope"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().trace"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().expectedTypeIsUnknown"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral()", "target": "src1970.java.ArgumentTypeResolver.getShapeTypeOfFunctionLiteral().suspendFunctionTypeExpected"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault()", "target": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().returnTypeRef"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault()", "target": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().scope"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault()", "target": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().trace"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault()", "target": "src1970.java.ArgumentTypeResolver.resolveTypeRefWithDefault().defaultValue"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes()", "target": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes()", "target": "src1970.java.ArgumentTypeResolver.analyzeArgumentsAndRecordTypes().resolveArgumentsMode"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().context"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().trace"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().statementFilter"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().expectedType"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable()", "target": "src1970.java.ArgumentTypeResolver.updateResultArgumentTypeIfNotDenotable().targetType"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation()", "target": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation().expression"}, {"type": "has_parameter", "source": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation()", "target": "src1970.java.ArgumentTypeResolver.isCollectionLiteralInsideAnnotation().context"}, {"type": "contains", "source": "src1970.java.createFunctionType", "target": "src1970.java.null_342_61"}, {"type": "contains", "source": "src1970.java.createFunctionType", "target": "src1970.java.null_342_117"}, {"type": "contains", "source": "src1970.java.createFunctionType", "target": "src1970.java.null_380_72"}, {"type": "contains", "source": "src1970.java.createFunctionType", "target": "src1970.java.null_380_128"}, {"type": "contains", "source": "src1970.java.resolveTypeRefWithDefault", "target": "src1970.java.null_398_121"}, {"type": "contains", "source": "src1970.java.resolveTypeRefWithDefault", "target": "src1970.java.null_400_95"}]}